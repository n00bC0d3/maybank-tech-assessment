---
# Source: my-app/templates/01-ns.yaml
#
apiVersion: v1
kind: Namespace
metadata:
  name: theapp
#
---
# Source: my-app/templates/02-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: example-secret
  namespace: theapp

type: Opaque
data:
  username: "bXlVc2VybmFtZQ=="
  password: "VGhpc0lzTm90QVNlY3VyZWRQYXNzd29yZA=="
---
# Source: my-app/templates/03-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-configmap 
  namespace: theapp

data:
  config-file.properties: |
    key1=value1
    key2=value2
---
# Source: my-app/templates/04-pv.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: efs-sc
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: thegreatapp
    meta.helm.sh/release-namespace: theapp
provisioner: efs.csi.aws.com
---
# Source: my-app/templates/04-pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: example-pv
  namespace: theapp
label:
  app.kubernetes.io/managed-by: helm

spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-0e197be4a8c11483c #<EFS-file-system-id>
---
# Source: my-app/templates/04-pv.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: example-pvc
  namespace: theapp

spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: efs-sc
---
# Source: my-app/templates/08-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-service
  namespace: theapp

spec:
  selector:
    app: example-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP
---
# Source: my-app/templates/09-pod_debug.yaml
apiVersion: v1
kind: Pod
metadata:
  name: efs-debug-pod
  namespace: theapp

spec:
  containers:
  - name: debug-container
    image: amazonlinux:2
    command: [ "sleep", "3600" ]
    volumeMounts:
    - mountPath: /mnt/efs
      name: efs-volume
  volumes:
  - name: efs-volume
    persistentVolumeClaim:
      claimName: example-pvc
---
# Source: my-app/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "goodapp-test-connection"
  namespace: theapp
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['http://80']
  # restartPolicy: Never
---
# Source: my-app/templates/06-deployConfigSecret.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thegreatapp-deployment
  namespace: theapp

spec:
  replicas: 3
  selector:
    matchLabels:
      app: thegreatapp
  template:
    metadata:
      labels:
        app: thegreatapp
    spec:
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: thegreatapp
      containers:
      - name: example-container
        image: busybox:latest
        command: [ "sleep", "3600" ]
        envFrom:
        - secretRef:
            name: example-secret
        volumeMounts:
        - mountPath: "/data"
          name: efs-volume
        - mountPath: "/config"
          name: config-volume
      volumes:
      - name: efs-volume
        persistentVolumeClaim:
          claimName: example-pvc
      - name: config-volume
        configMap:
          name: example-configmap
          items:
          - key: config-file.properties
            path: config-file.properties
---
# Source: my-app/templates/05-hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: example-hpa
  namespace: theapp

spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: example-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: my-app/templates/07-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
  namespace: theapp

  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - example.com
    secretName: example-secret
  rules:
  - host: example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: example-service
            port:
              number: 80
